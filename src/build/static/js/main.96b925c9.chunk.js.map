{"version":3,"sources":["Header.js","Indicators.js","Chart.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","Indicators","totalCases","totalDeaths","deathRate","newCases","newCaseRate","props","data","layout","title","yaxis","type","scale","colorway","config","responsive","displayModeBar","App","state","population","covid19","isLoading","this","setState","newState","Promise","all","map","url","a","fetch","response","parse","text","header","trace1","x","y","name","mode","trace2","trace3","trace4","trace5","trace6","previousRowAlmaty","previousRowAstana","previousRowKz","forEach","row","hour","Date","getHours","includes","date","slice","activeCases","parseInt","Confirmed","Recovered","Deaths","Region","push","newCasesRate","JSON","stringify","firstAndLastDates","length","line","color","dash","width","latestCovidData","previousCovidData","chartDataActiveCases","chartDataNewCasesRate","pop","id","toFixed","getActiveCases","getNewCasesRate","Chart","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.96b925c9.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Header = () => (\n  <nav className=\"flex items-center justify-between flex-wrap bg-white py-6 px-6 md:px-16 shadow-sm\">\n    <div className=\"flex items-center flex-shrink-0 text-gray-600 mr-6\">\n      <span className=\"font-semibold text-xl tracking-tight\">KAZAKHSTAN DASHBOARD</span>\n    </div>\n    <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\n      <div className=\"text-sm lg:flex-grow\">\n\n      </div>\n\n      <div>\n        <a href=\"https://datahub.io/anuveyatsu\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          DATAHUB\n        </a>\n        <a href=\"https://github.com/anuveyatsu\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          GITHUB\n        </a>\n      </div>\n    </div>\n  </nav>\n)\n\n\nexport default Header;\n","import React from 'react';\n\n\nconst Indicators = ({totalCases, totalDeaths, deathRate, newCases, newCaseRate}) => (\n  <div className=\"grid sm:grid-cols-1 lg:grid-cols-5 gap-8 mt-4 mb-4 font-bold text-3xl\">\n    <div className=\"border text-center py-16\">\n      {totalCases}\n      <div className=\"text-xs text-gray-600 font-light\">Cases in Kazakhstan</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {totalDeaths}\n      <div className=\"text-xs text-gray-600 font-light\">Deaths in Kazakhstan</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {deathRate} %\n      <div className=\"text-xs text-gray-600 font-light\">Death rate</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {newCases}\n      <div className=\"text-xs text-gray-600 font-light\">New cases last 24h</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {newCaseRate} %\n      <div className=\"text-xs text-gray-600 font-light\">New cases rate</div>\n    </div>\n  </div>\n\n)\n\n\nexport default Indicators;\n","import React from 'react';\nimport Plot from 'react-plotly.js';\n\n\nexport default function (props) {\n  return (\n    <Plot\n      className=\"w-full h-graph\"\n      data={props.data}\n      layout={ {title: props.title, yaxis: {type: props.scale}, colorway: ['black', 'gray', 'orange']} }\n      config={ {responsive: true, displayModeBar: false} }\n    />\n  );\n}\n","import React, { Component } from 'react';\nimport { parse } from 'papaparse';\nimport Header from './Header';\nimport Indicators from './Indicators';\nimport Chart from './Chart';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      population: [],\n      covid19: [],\n      isLoading: false\n    };\n  }\n\n\n  async componentDidMount() {\n    this.setState({ isLoading: true });\n\n    const population = 'https://raw.githubusercontent.com/anuveyatsu/demographics-kz/master/data/regions-total.csv'\n    const covid19 = 'https://raw.githubusercontent.com/anuveyatsu/covid-19-kz/master/data/kz.csv'\n\n    const newState = {isLoading: false}\n\n    await Promise.all([population, covid19].map(async url => {\n      let response = await fetch(url)\n      if (url === population) {\n        newState.population = (parse(await response.text(), {header: true})).data\n      } else if (url === covid19) {\n        newState.covid19 = (parse(await response.text(), {header: true})).data\n      }\n    }))\n\n    this.setState(newState)\n  }\n\n\n  getActiveCases() {\n    const { covid19 } = this.state;\n    const trace5percent = {x: [], y:[5,5], type:'scatter', name: '5% level'};\n    const trace2percent = {x: [], y:[2,2], type:'scatter', name: '2% level'};\n    const trace1 = {x: [], y: [], type: 'scatter', name: 'Active cases (Almaty)', mode: 'lines+markers'};\n    const trace2 = {x: [], y: [], type: 'scatter', name: 'Active cases (Astana)', mode: 'lines+markers'};\n    const trace3 = {x: [], y: [], type: 'scatter', name: 'Active cases (Kazakhstan)', mode: 'lines+markers'};\n    const trace4 = {x: [], y: [], type: 'bar', name: 'New cases rate (Almaty)'};\n    const trace5 = {x: [], y: [], type: 'bar', name: 'New cases rate (Astana)'};\n    const trace6 = {x: [], y: [], type: 'bar', name: 'New cases rate (Kazakhstan)'};\n\n    let previousRowAlmaty = null;\n    let previousRowAstana = null;\n    let previousRowKz = null;\n\n    covid19.forEach(row => {\n      // Use only every 3 hours data to make the line graph smooth\n      const hour = (new Date(row.Date)).getHours();\n      const acceptedHours = [0, 3, 6, 9, 12, 15, 18, 21];\n      if (acceptedHours.includes(hour)) {\n        const date = row.Date.slice(0,19);\n        const activeCases = parseInt(row.Confirmed) - parseInt(row.Recovered) - parseInt(row.Deaths);\n\n        if (row.Region === 'Нур-Султан') {\n          trace2.x.push(date);\n          trace2.y.push(activeCases);\n          const newCases = previousRowAstana ? row.Confirmed - previousRowAstana.Confirmed : null;\n          const newCasesRate = newCases ? newCases / previousRowAstana.Confirmed * 100 : null;\n          trace5.x.push(date);\n          trace5.y.push(newCasesRate);\n          previousRowAstana = JSON.parse(JSON.stringify(row));\n        } else if (row.Region === 'Алматы') {\n          trace1.x.push(date);\n          trace1.y.push(activeCases);\n          const newCases = previousRowAlmaty ? row.Confirmed - previousRowAlmaty.Confirmed : null;\n          const newCasesRate = newCases ? newCases / previousRowAlmaty.Confirmed * 100 : null;\n          trace4.x.push(date);\n          trace4.y.push(newCasesRate);\n          previousRowAlmaty = JSON.parse(JSON.stringify(row));\n        } else if (row.Region === 'Казахстан') {\n          trace3.x.push(date);\n          trace3.y.push(activeCases);\n          const newCases = previousRowKz ? row.Confirmed - previousRowKz.Confirmed : null;\n          const newCasesRate = newCases ? newCases / previousRowKz.Confirmed * 100 : null;\n          trace6.x.push(date);\n          trace6.y.push(newCasesRate);\n          previousRowKz = JSON.parse(JSON.stringify(row));\n        }\n      }\n    })\n\n    return [trace1, trace2, trace3];\n  }\n\n\n  getNewCasesRate() {\n    const { covid19 } = this.state;\n    const trace1 = {x: [], y: [], type: 'bar', name: 'New cases rate (Almaty)'};\n    const trace2 = {x: [], y: [], type: 'bar', name: 'New cases rate (Astana)'};\n    const trace3 = {x: [], y: [], type: 'bar', name: 'New cases rate (Kazakhstan)'};\n\n    let previousRowAlmaty = null;\n    let previousRowAstana = null;\n    let previousRowKz = null;\n\n    covid19.forEach(row => {\n      // Use data every 24h so filter by hour when it is 0\n      const hour = (new Date(row.Date)).getHours();\n      if (hour === 6) {\n        const date = row.Date.slice(0,19);\n\n        if (row.Region === 'Нур-Султан') {\n          trace2.x.push(date);\n          const newCases = previousRowAstana ? row.Confirmed - previousRowAstana.Confirmed : null;\n          const newCasesRate = newCases ? newCases / previousRowAstana.Confirmed * 100 : null;\n          trace2.y.push(newCasesRate);\n          previousRowAstana = JSON.parse(JSON.stringify(row));\n        } else if (row.Region === 'Алматы') {\n          trace1.x.push(date);\n          const newCases = previousRowAlmaty ? row.Confirmed - previousRowAlmaty.Confirmed : null;\n          const newCasesRate = newCases ? newCases / previousRowAlmaty.Confirmed * 100 : null;\n          trace1.y.push(newCasesRate);\n          previousRowAlmaty = JSON.parse(JSON.stringify(row));\n        } else if (row.Region === 'Казахстан') {\n          trace3.x.push(date);\n          const newCases = previousRowKz ? row.Confirmed - previousRowKz.Confirmed : null;\n          const newCasesRate = newCases ? newCases / previousRowKz.Confirmed * 100 : null;\n          trace3.y.push(newCasesRate);\n          previousRowKz = JSON.parse(JSON.stringify(row));\n        }\n      }\n    })\n\n    const firstAndLastDates = [trace1.x[0], trace1.x[trace1.x.length - 1]];\n    const trace5percent = {\n      x: firstAndLastDates,\n      y:[5,5],\n      type:'scatter',\n      name: '5% level',\n      mode: 'lines',\n      line: {\n        color: 'red',\n        dash: 'dot',\n        width: 1\n      }\n    };\n    const trace2percent = {\n      x: firstAndLastDates,\n      y:[2,2],\n      type:'scatter',\n      name: '2% level',\n      mode: 'lines',\n      line: {\n        color: 'blue',\n        dash: 'dot',\n        width: 1\n      }\n    };\n    return [trace1, trace2, trace3, trace5percent, trace2percent];\n  }\n\n\n  render() {\n    const { covid19, isLoading } = this.state;\n\n    if (isLoading) {\n      return (\n        <div className=\"flex h-screen\">\n          <p className=\"m-auto\">Loading ...</p>\n        </div>\n      );\n    }\n\n    let latestCovidData, previousCovidData, totalCases, totalDeaths, deathRate,\n      newCases, newCaseRate, chartDataActiveCases, chartDataNewCasesRate;\n    if (covid19.length > 0) {\n      latestCovidData = covid19.slice(covid19.length - 19);\n      previousCovidData = covid19.slice(covid19.length - 469, covid19.length - 451);\n      latestCovidData.pop();\n      latestCovidData.forEach(row => row.id = row.Region);\n      totalCases = latestCovidData[0].Confirmed;\n      totalDeaths = latestCovidData[0].Deaths;\n      deathRate = (totalDeaths / totalCases * 100).toFixed(2);\n      newCases = totalCases - previousCovidData[0].Confirmed;\n      newCaseRate = (newCases / previousCovidData[0].Confirmed * 100).toFixed(2);\n\n      chartDataActiveCases = this.getActiveCases();\n      chartDataNewCasesRate = this.getNewCasesRate();\n    }\n\n    return (\n      <div className=\"h-screen\">\n        <Header />\n        <div className=\"px-6 md:px-16 h-full\">\n          <Indicators\n            totalCases={totalCases}\n            totalDeaths={totalDeaths}\n            deathRate={deathRate}\n            newCases={newCases}\n            newCaseRate={newCaseRate}\n          />\n          <div className=\"grid grid-cols-1 mt-4 mb-4 w-full h-screen-800px\">\n            <Chart data={chartDataActiveCases} scale=\"log\" title=\"Active cases (confirmed - recovered - deaths)\" />\n            <Chart data={chartDataNewCasesRate} scale=\"linear\" title=\"New cases rate\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}