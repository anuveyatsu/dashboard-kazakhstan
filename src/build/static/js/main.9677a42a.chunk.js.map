{"version":3,"sources":["Header.js","Indicators.js","LineChart.js","Choropleth.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","Indicators","totalCases","totalDeaths","deathRate","newCases","newCaseRate","LineChart","data","margin","top","right","bottom","left","xScale","type","format","precision","xFormat","yScale","min","max","stacked","reverse","axisBottom","tickValues","legend","legendOffset","legendPosition","axisLeft","orient","tickSize","tickPadding","tickRotation","enableGridX","colors","scheme","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","pointSize","enableSlices","sliceTooltip","slice","style","background","padding","border","points","map","point","index","key","id","Date","xFormatted","toString","color","serieColor","serieId","yFormatted","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","Choropleth","features","value","domain","unknownColor","valueFormat","projectionTranslation","projectionRotation","projectionScale","enableGraticule","graticuleLineColor","borderWidth","borderColor","itemTextColor","App","props","state","population","covid19","geojson","isLoading","this","setState","newState","Promise","all","url","a","fetch","response","parse","text","header","json","latestCovidData","previousCovidData","mainCitiesData","length","pop","forEach","row","Region","Confirmed","Deaths","toFixed","hour","getHours","acceptedHours","includes","push","x","y","parseInt","Recovered","referenceDictionary","feature","properties","HASC_1","HASC_2","NAME_2","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9677a42a.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Header = () => (\n  <nav className=\"flex items-center justify-between flex-wrap bg-white py-6 px-6 md:px-16 shadow-sm\">\n    <div className=\"flex items-center flex-shrink-0 text-gray-600 mr-6\">\n      <span className=\"font-semibold text-xl tracking-tight\">KAZAKHSTAN DASHBOARD</span>\n    </div>\n    <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\n      <div className=\"text-sm lg:flex-grow\">\n\n      </div>\n\n      <div>\n        <a href=\"https://datahub.io/anuveyatsu\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          DATAHUB\n        </a>\n        <a href=\"https://github.com/anuveyatsu\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          GITHUB\n        </a>\n      </div>\n    </div>\n  </nav>\n)\n\n\nexport default Header;\n","import React from 'react';\n\n\nconst Indicators = ({totalCases, totalDeaths, deathRate, newCases, newCaseRate}) => (\n  <div className=\"grid sm:grid-cols-1 lg:grid-cols-5 gap-8 mt-4 mb-4 font-bold text-3xl\">\n    <div className=\"border text-center py-16\">\n      {totalCases}\n      <div className=\"text-xs text-gray-600 font-light\">Cases in Kazakhstan</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {totalDeaths}\n      <div className=\"text-xs text-gray-600 font-light\">Deaths in Kazakhstan</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {deathRate} %\n      <div className=\"text-xs text-gray-600 font-light\">Death rate</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {newCases}\n      <div className=\"text-xs text-gray-600 font-light\">New cases last 24h</div>\n    </div>\n    <div className=\"border text-center py-16\">\n      {newCaseRate} %\n      <div className=\"text-xs text-gray-600 font-light\">New cases rate</div>\n    </div>\n  </div>\n\n)\n\n\nexport default Indicators;\n","import React from 'react';\nimport { ResponsiveLine } from '@nivo/line';\n// make sure parent container have a defined height when using\n// responsive component, otherwise height will be 0 and\n// no chart will be rendered.\nconst LineChart = ({ data }) => (\n    <ResponsiveLine\n        data={data}\n        margin={{ top: 20, right: 20, bottom: 40, left: 60 }}\n        xScale={{\n            type: 'time',\n            format: '%Y-%m-%dT%H:%M:%S',\n            precision: 'hour',\n        }}\n        xFormat=\"time:%Y-%m-%dT%H:%M:%S\"\n        yScale={{ type: 'linear', min: 50, max: 'auto', stacked: false, reverse: false }}\n        axisBottom={{\n            format: '%b %d',\n            tickValues: 'every 8 days',\n            legend: 'Date',\n            legendOffset: 35,\n            legendPosition: 'middle'\n        }}\n        axisLeft={{\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 0,\n            tickRotation: 0,\n            legend: 'Active cases (confirmed - recovered - deaths)',\n            legendOffset: -50,\n            legendPosition: 'middle'\n        }}\n        enableGridX={false}\n        colors={{ scheme: 'nivo' }}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        pointSize=\"2\"\n        enableSlices=\"x\"\n        sliceTooltip={({ slice }) => {\n            return (\n                <div\n                    style={{\n                        background: 'white',\n                        padding: '9px 12px',\n                        border: '1px solid #ccc',\n                    }}\n                >\n                    {slice.points.reverse().map((point, index) => (\n                      <div key={point.id}>\n                        {index === 0\n                          ? <div>{(new Date(point.data.xFormatted)).toString()}</div>\n                          : ''\n                        }\n                        <div\n                            style={{\n                                color: point.serieColor,\n                                padding: '3px 0',\n                            }}\n                        >\n                          {point.serieId}: {point.data.yFormatted} active cases\n                        </div>\n                      </div>\n                    ))}\n                </div>\n            )\n        }}\n        useMesh={true}\n        legends={[\n            {\n                anchor: 'top-left',\n                direction: 'column',\n                justify: false,\n                translateX: 10,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 6,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\n\nexport default LineChart;\n","import React from 'react';\nimport { ResponsiveChoropleth } from '@nivo/geo';\n// make sure parent container have a defined height when using\n// responsive component, otherwise height will be 0 and\n// no chart will be rendered.\nconst Choropleth = ({ data, features }) => (\n    <ResponsiveChoropleth\n        data={data}\n        value=\"Confirmed\"\n        features={features}\n        margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\n        colors=\"PuRd\"\n        domain={[ 0, 300 ]}\n        unknownColor=\"#666666\"\n        valueFormat=\".2s\"\n        projectionTranslation={[ -0.9, 2 ]}\n        projectionRotation={[ 0, 0, 0 ]}\n        projectionScale={680}\n        enableGraticule={true}\n        graticuleLineColor=\"#dddddd\"\n        borderWidth={0.5}\n        borderColor=\"#152538\"\n        legends={[\n            {\n                anchor: 'bottom-left',\n                direction: 'column',\n                justify: true,\n                translateX: 20,\n                translateY: -10,\n                itemsSpacing: 0,\n                itemWidth: 94,\n                itemHeight: 18,\n                itemDirection: 'left-to-right',\n                itemTextColor: '#444444',\n                itemOpacity: 0.85,\n                symbolSize: 18,\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemTextColor: '#000000',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\n\nexport default Choropleth;\n","import React, { Component } from 'react';\nimport { parse } from 'papaparse';\nimport Header from './Header';\nimport Indicators from './Indicators';\nimport LineChart from './LineChart';\nimport Choropleth from './Choropleth';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      population: [],\n      covid19: [],\n      geojson: {},\n      isLoading: false\n    };\n  }\n\n\n  async componentDidMount() {\n    this.setState({ isLoading: true });\n\n    const population = 'https://raw.githubusercontent.com/anuveyatsu/demographics-kz/master/data/regions-total.csv'\n    const covid19 = 'https://raw.githubusercontent.com/anuveyatsu/covid-19-kz/master/data/kz.csv'\n    const geojson = 'https://raw.githubusercontent.com/anuveyatsu/geo-boundaries-kz/master/data/geojson/kz_1.json'\n\n    const newState = {isLoading: false}\n\n    await Promise.all([population, covid19, geojson].map(async url => {\n      let response = await fetch(url)\n      if (url === population) {\n        newState.population = (parse(await response.text(), {header: true})).data\n      } else if (url === covid19) {\n        newState.covid19 = (parse(await response.text(), {header: true})).data\n      } else if (url === geojson) {\n        newState.geojson = await response.json()\n      }\n    }))\n\n    this.setState(newState)\n  }\n\n\n  render() {\n    const { population, covid19, geojson, isLoading } = this.state;\n\n    if (isLoading) {\n      return (\n        <div className=\"flex h-screen\">\n          <p className=\"m-auto\">Loading ...</p>\n        </div>\n      );\n    }\n\n    let latestCovidData, previousCovidData, totalCases, totalDeaths, deathRate,\n      newCases, newCaseRate, mainCitiesData;\n    if (covid19.length > 0) {\n      latestCovidData = covid19.slice(covid19.length - 19);\n      previousCovidData = covid19.slice(covid19.length - 469, covid19.length - 451);\n      latestCovidData.pop();\n      latestCovidData.forEach(row => row.id = row.Region);\n      totalCases = latestCovidData[0].Confirmed;\n      totalDeaths = latestCovidData[0].Deaths;\n      deathRate = (totalDeaths / totalCases * 100).toFixed(2);\n      newCases = totalCases - previousCovidData[0].Confirmed;\n      newCaseRate = (newCases / previousCovidData[0].Confirmed * 100).toFixed(2);\n\n      mainCitiesData = [\n        {id: 'Нур-Султан', data: []},\n        {id: 'Алматы', data: []}\n      ];\n      covid19.forEach(row => {\n        // Use only every 3 hours data to make the line graph smooth\n        const hour = (new Date(row.Date)).getHours();\n        const acceptedHours = [0, 3, 6, 9, 12, 15, 18, 21];\n        if (row.Region === 'Нур-Султан' && acceptedHours.includes(hour)) {\n          mainCitiesData[0].data.push({x: row.Date.slice(0,19), y: parseInt(row.Confirmed) - parseInt(row.Recovered) - parseInt(row.Deaths)});\n        } else if (row.Region === 'Алматы' && acceptedHours.includes(hour)) {\n          mainCitiesData[1].data.push({x: row.Date.slice(0,19), y: parseInt(row.Confirmed) - parseInt(row.Recovered) - parseInt(row.Deaths)});\n        }\n      })\n    }\n\n    if (geojson.features) {\n      const referenceDictionary = {\n        \"Almaty (Alma-Ata)\": \"Алматы\",\n        \"KZ.AM.TS\": \"Нур-Султан\",\n        \"KZ.SK.SH\": \"Шымкент\",\n        \"KZ.AA\": \"Алматинская область\",\n        \"KZ.AM\": \"Акмолинская область\",\n        \"KZ.AT\": \"Актюбинская область\",\n        \"KZ.AR\": \"Атырауская область\",\n        \"KZ.EK\": \"Восточно-Казахстанская область\",\n        \"KZ.MG\": \"Мангистауская область\",\n        \"KZ.NK\": \"Северо-Казахстанская область\",\n        \"KZ.PA\": \"Павлодарская область\",\n        \"KZ.QG\": \"Карагандинская область\",\n        \"KZ.QS\": \"Костанайская область\",\n        \"KZ.QO\": \"Кызылординская область\",\n        \"KZ.SK\": \"Туркестанская область\",\n        \"KZ.WK\": \"Западно-Казахстанская область\",\n        \"KZ.ZM\": \"Жамбылская область\"\n      }\n      geojson.features.forEach(feature => {\n        feature.id = referenceDictionary[feature.properties.HASC_1]\n          || referenceDictionary[feature.properties.HASC_2]\n          || referenceDictionary[feature.properties.NAME_2];\n      })\n    }\n\n    return (\n      <div className=\"h-screen\">\n        <Header />\n        <div className=\"px-6 md:px-16 h-full\">\n          <Indicators\n            totalCases={totalCases}\n            totalDeaths={totalDeaths}\n            deathRate={deathRate}\n            newCases={newCases}\n            newCaseRate={newCaseRate}\n          />\n        <div className=\"grid sm:grid-cols-1 lg:grid-cols-2 gap-8 mt-4 mb-4 w-full h-screen-800px md:h-screen-400px\">\n            <LineChart data={mainCitiesData} />\n            <Choropleth data={latestCovidData} features={geojson.features} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}